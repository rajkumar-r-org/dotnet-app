name: .NET

on:
  push:
    branches: [ feature/app ]
  pull_request:
    branches: [ feature/app ]

env:
  AZURE_WEBAPP_NAME: dotnetappgithubactions
  AZURE_WEBAPP_PACKAGE_PATH: "."
  SONAR_PROJECTKEY: 'rajkumar-r-org_dotnet-app'
  SONAR_SERVER: 'sonarcloud.io'

jobs:
  SonarScan:
    runs-on: ubuntu-latest
    outputs:
      st
    steps:
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args:
            -Dsonar.projectKey=rajkumar-r-org_dotnet-app
            -Dsonar.organization=rajkumar-org
    - name: Check Scan Status
      id: sonar-gate
      shell: pwsh
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_SERVER: ${{env.SONAR_SERVER}}
        SONAR_PROJECTKEY: ${{env.SONAR_PROJECTKEY}}
      run: |
        $sonarToken=[System.Environment]::GetEnvironmentVariable('SONAR_TOKEN', 'Process')
        $SonarServerName=[System.Environment]::GetEnvironmentVariable('SONAR_SERVER', 'Process')
        $SonarProjectKey=[System.Environment]::GetEnvironmentVariable('SONAR_PROJECTKEY', 'Process')
        $Token = [System.Text.Encoding]::UTF8.GetBytes($sonarToken + ":")
        $TokenInBase64 = [System.Convert]::ToBase64String($Token)
        
        $basicAuth = [string]::Format("Basic {0}", $TokenInBase64)
        $Headers = @{ Authorization = $basicAuth }
        
        $QualityGateResult = Invoke-RestMethod -Method Get -Uri http://$SonarServerName/api/qualitygates/project_status?projectKey=$SonarProjectKey -Headers $Headers
        $QualityGateResult | ConvertTo-Json | Write-Host
        
        if ($QualityGateResult.projectStatus.status -eq "OK"){
          echo "::set-output name=status::$qualitygate_result"
        }
        else{
            throw "Quality gate failed. Please check and fix the issues by reviewing the same."
        }
        echo $qualitygate_result

  CodeQL:
    uses: ./.github/workflows/codeql-analysis.yml
    name: CodeQL
    permissions:
      actions: read
      security-events: write
      contents: read

  Build_Test:
    name: Build
    needs : [SonarScan, CodeQL] # Ensure that the Build job is completed before starting the Test job
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover --no-build --verbosity normal

    - name: Publish
      run:  dotnet publish -c Release -o ./myapp
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: 'webapp-artifact'
        path: ./myapp

  # Release:
  #   needs: Build_Test
  #   runs-on : ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3
  #   - name: Create Release
  #     id: create-new-release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
  #     with: 
  #       tag_name: ${{github.run_number}}
  #       release_name : Release ${{github.run_number}}
    

  Deploy :
    needs: Build_Test # Ensure that the  job is completed before starting the Test job
    runs-on : ubuntu-latest
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: 'webapp-artifact'
        path: './'
    

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'production'
          package: ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DOTNET}}

  # EndToEndTest:
  #   needs: Deploy
  #   runs-on : ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: '8.0.x'
  #     - name: Restore dependencies
  #       run: dotnet restore
  #     - name: Build
  #       run: dotnet build --no-restore
  #     - name: Test
  #       run: dotnet test ./test/BPCalculator.TEST/BPCalculator.TEST.csproj --no-build
    
  # PerformanceTest:
  #   #needs: EndToEndTest
  #   runs-on: ubuntu-latest
  #   env:
  #     apiKey: ${{secrets.BZM_KEY}}
  #     apiSecret: ${{secrets.BZM_SECERET}}
  #     continuePipeline: "false"
  #     showTailLog: "false"
  #     testID: "2247099"
  #   steps:
  #     - uses: actions/checkout@v3
  #       name: BlazmeterTests
  #     - uses: BlazeRunner-BZR/Github-Action@v8.1
  #       id:  run-test
  #       with:
  #         apiKey: ${{env.apiKey}}
  #         apiSecret: ${{env.apiSecret}}
  #         testID: ${{env.testID}}
  #         continuePipeline: ${{env.continuePipeline}}
  #         showTailLog: ${{env.showTailLog}}



