name: .NET

on:
  workflow_dispatch: 
  # push:
  #   branches: [ feature/app ]
  # pull_request:
  #   branches: [ feature/app ]

env:
  AZURE_WEBAPP_NAME: dotnetappgithubactions
  AZURE_WEBAPP_PACKAGE_PATH: "."
  SONAR_PROJECTKEY: 'rajkumar-r-org_dotnet-app'
  SONAR_SERVER: 'sonarcloud.io'

jobs:
  SonarScan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args:
            -Dsonar.projectKey=rajkumar-r-org_dotnet-app
            -Dsonar.organization=rajkumar-org

  CodeQL:
    uses: ./.github/workflows/codeql-analysis.yml
    name: CodeQL
    permissions:
      actions: read
      security-events: write
      contents: read

  Create_Issue:
    name: Create_Issue
    needs: [CodeQL,SonarScan]
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.sonar-status.outputs.sonar_status }}
    steps:
      - name: Sonar Status
        id: sonar-status
        run: |
          SONAR_STATUS=$(curl --request GET \
          --url 'https://sonarcloud.io/api/qualitygates/project_status?projectKey=rajkumar-r-org_dotnet-app&branch=feature%2Fapp' \
          --header "SonarQubeAuthToken: ${{secrets.SONAR_TOKEN}}")
          status=$(echo $SONAR_STATUS | jq '.projectStatus.status' -r)
          echo "::set-output name=sonar_status::$status"
          echo $status
      
      - name: Login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: "https://rajkumar-r.atlassian.net/"
          JIRA_USER_EMAIL: "rajkumarravi21897@gmail.com"
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}

      - name: Create Jira Ticket
        id: create_jira_ticket
        if: steps.sonar-status.outputs.sonar_status != 'OK'
        uses: atlassian/gajira-create@v3
        with:
          project: 'GAR'
          issuetype: 'Issue'
          summary: 'SonarQube Quality Gate Failed'
          description: 'This issue was automatically created from GitHub Actions. Sonar quality gate status: ${{ steps.sonar-status.outputs.sonar_status }}'
      - name: Log created issue
        run: echo "Issue ${{ steps.create_jira_ticket.outputs.issue }} was created"
     
  Build_Test:
    name: Build
    if: needs.Create_Issue.outputs.status == 'OK'
    needs : [SonarScan, CodeQL, Create_Issue] # Ensure that the Build job is completed before starting the Test job
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover --no-build --verbosity normal

    - name: Publish
      run:  dotnet publish -c Release -o ./myapp
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: 'webapp-artifact'
        path: ./myapp

  # Release:
  #   needs: Build_Test
  #   runs-on : ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3
  #   - name: Create Release
  #     id: create-new-release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
  #     with: 
  #       tag_name: ${{github.run_number}}
  #       release_name : Release ${{github.run_number}}
  
  Deploy-DEV :
    needs: Build_Test # Ensure that the  job is completed before starting the Test job
    runs-on : ubuntu-latest
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp-dev.outputs.webapp-url }}
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: 'webapp-artifact'
          path: './'
        
      - name: Deploy to DEV
        id: deploy-to-webapp-dev
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'DEV'
          package: ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DOTNET_DEV}}

  Dev-Blaze-Test:
    needs: Deploy-DEV
    uses: ./.github/workflows/blazemeter.yml
    name: blaze-dev-test
    secrets: inherit
    with:
      testID: '13763443'
      masterID: '70999404'

  Deploy-QA :
    needs: [Deploy-DEV, Dev-Blaze-Test] # Ensure that the  job is completed before starting the Test job
    runs-on : ubuntu-latest
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp-qa.outputs.webapp-url }}
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: 'webapp-artifact'
          path: './'
        
      - name: Deploy to QA
        id: deploy-to-webapp-qa
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'QA'
          package: ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DOTNET_QA}}

  QA-Blaze-Test:
    needs: Deploy-QA
    uses: ./.github/workflows/blazemeter.yml
    name: blaze-qa-test
    secrets: inherit
    with:
      testID: '13763444'
      masterID: '70999426'

  Deploy-PROD :
    needs: [Deploy-QA, QA-Blaze-Test] # Ensure that the  job is completed before starting the Test job
    runs-on : ubuntu-latest
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp-prod.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: 'webapp-artifact'
        path: './'
      
    - name: Deploy to Azure Web App
      id: deploy-to-webapp-prod
      uses: azure/webapps-deploy@v2
      with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'production'
          package: ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DOTNET}}

  PROD-Blaze-Test:
    needs: Deploy-PROD
    uses: ./.github/workflows/blazemeter.yml
    name: blaze-prod-test
    secrets: inherit
    with:
      testID: '13761540'
      masterID: '70998982'


